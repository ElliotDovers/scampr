% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/candidate.bfs.R
\name{candidate.bfs}
\alias{candidate.bfs}
\title{Search algorithm for simple 2D basis functions configurations on scampr models}
\usage{
candidate.bfs(
  data,
  max.basis.functions,
  coord.names = c("x", "y"),
  radius.type = c("diag", "limiting"),
  bf.matrix.type = c("sparse", "dense")
)
}
\arguments{
\item{data}{a data frame of columns 'coord.names' that contains at least the extremities of the domain of interest. Useful to ensure the same basis function configurations are created by 'simple_basis' if comparing to various searches.}

\item{max.basis.functions}{Optional. An integer describing a rough upper limit to the number of basis functions to search. Defaults to half the number of presences in the data sets.}

\item{coord.names}{vector of character strings describing the names of the coordinates in 'data'. Ordered horizontal axis to vertical}

\item{radius.type}{a character string describing the type of radius length to use. One of 'diag' = diagonal dist. between nodes or 'limiting' = sqrt(Domain Area)/log(k).}

\item{bf.matrix.type}{a character string, one of 'sparse' or 'dense' indicating whether to use sparse or dense matrix computations for the basis functions created.}
}
\value{
a list of basis function configurations up to the maximum supplied
}
\description{
This function takes in a scampr model and calculates likelihoods and AIC for the list of basis functions supplied. If none are supplied then the algorithm fits increasingly dense regular grids of basis functions (of the type created by scampr::simple_basis). The algorithm starts with an IPP (i.e. zero basis functions) and increases to <= 'max.basis.functions'. If 'po.fold.id' and/or 'pa.fold.id' are supplied then the function will perform a k-fold hold-one-out cross validation to calculate out-of-sample likelihoods (conditional on the latent field).
}
\examples{
#' # Get the gorilla nesting data
dat <- gorillas

# Standardise the elevation covariate
dat$elev.std <- scale(dat$elevation)

# Fit an IPP model to the point pattern
m.ipp <- scampr(pres ~ elev.std, data = dat, model.type = "ipp")
 \dontrun{
# Search through an increasingly dense regular grid of basis functions
res <- simple_basis_search(m.ipp)
}
}
